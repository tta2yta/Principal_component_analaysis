# install.packages("factoextra")
# install.packages("haven")
# install.packages("foreign")
#install.packages("dplyr")                # Install dplyr package
library(foreign)       
library(factoextra)
library(haven)

# read data set from local machine
#cerealnut <- read.dta("cerealnut.dta")

#read data set from server
cerealnut <- read.dta("http://statistics.ats.ucla.edu/stat/data/cerealnut.dta")
row.names(cerealnut)<- statadata$brand
cerealnut.active <-cerealnut[1:21, 2:ncol(cerealnut)]
head(cerealnut.active[, 1:6])
resu.pca <- prcomp(cerealnut.active, scale = TRUE)
fviz_eig(resu.pca)
fviz_pca_ind(resu.pca,
             col.ind = "cos2", # Color by the quality of representation
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(resu.pca,
             col.var = "contrib", # Color by contributions to the PC
             gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
             repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(resu.pca, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
)

# Eigenvalues
eig.val1 <- get_eigenvalue(resu.pca)
eig.val1

# Results for Variables
resu.var <- get_pca_var(resu.pca)
resu.var$coord          # Coordinates
resu.var$contrib        # Contributions to the PCs
resu.var$cos2           # Quality of representation 
# Results for individuals
resu.ind <- get_pca_ind(resu.pca)
resu.ind$coord          # Coordinates
resu.ind$contrib        # Contributions to the PCs
resu.ind$cos2           # Quality of representation 

# Data for the supplementary individuals
ind.sup_1 <- cerealnut[22:25, 2:ncol(cerealnut)]
ind.sup_1[, 1:6]

ind.sup.coord_1 <- predict(resu.pca, newdata = ind.sup_1)
ind.sup.coord_1[, 1:4]

# Plot of active individuals
p <- fviz_pca_ind(resu.pca, repel = TRUE)
# Add supplementary individuals
fviz_add(p, ind.sup.coord_1, color ="blue")


# Centering and scaling the supplementary individuals
ind.scaled <- scale(ind.sup_1,  center = resu.pca$center, scale = resu.pca$scale)
                   
# Coordinates of the individividuals
coord_func <- function(ind, loadings){
  r <- loadings*ind
  apply(r, 2, sum)
}
pca.loadings <- resu.pca$rotation
ind.sup.coord_1 <- t(apply(ind.scaled, 1, coord_func, pca.loadings ))
ind.sup.coord_1[, 1:4]

#lets consider Qualitative / categorical variables for column fat

groups <- as.factor(cerealnut$fat[1:21])
fviz_pca_ind(resu.pca,
             col.ind = groups, # color by groups
             palette = c("#00AFBB",  "#FC4E07", "#00F0F0"),
             addEllipses = TRUE, # Concentration ellipses
             ellipse.type = "confidence",
             legend.title = "Groups",
             repel = TRUE
)



#Calculate the coordinates for the levels of grouping variables.

library(magrittr) # for pipe %>%
library(dplyr)   # everything else
# 1. Individual coordinates
resu.ind <- get_pca_ind(resu.pca)
# 2. Coordinate of groups
coord.groups <- resu.ind$coord %>%
  as_data_frame() %>%
  select(Dim.1, Dim.2,Dim.3) %>%
  mutate(competition = groups) %>%
  group_by(competition) %>%
  summarise(
    Dim.1 = mean(Dim.1),
    Dim.2 = mean(Dim.2),
    Dim.3 = mean(Dim.3)
  )
coord.groups


quanti.sup_1 <- cerealnut[1:21, 2, drop = FALSE]
head(quanti.sup)

# Predict coordinates and compute cos2
quanti.coord_1 <- cor(quanti.sup_1, resu.pca$x)
quanti.cos2_1 <- quanti.coord_1^2
# Graph of variables including supplementary variable "chalories"
p <- fviz_pca_var(resu.pca)
fviz_add(p, quanti.coord_1, color ="blue", geom="arrow")


# Helper function 
#::::::::::::::::::::::::::::::::::::::::
var_coord_func <- function(loadings, comp.sdev){
  loadings*comp.sdev
}
# Compute Coordinates
#::::::::::::::::::::::::::::::::::::::::
loadings <- resu.pca$rotation
sdev <- resu.pca$sdev
var.coord <- t(apply(loadings, 1, var_coord_func, sdev)) 
head(var.coord[, 1:4])


# Compute Cos2
#::::::::::::::::::::::::::::::::::::::::
var.cos2 <- var.coord^2
head(var.cos2[, 1:4])

# Compute contributions
#::::::::::::::::::::::::::::::::::::::::
comp.cos2 <- apply(var.cos2, 2, sum)
contrib <- function(var.cos2, comp.cos2){var.cos2*100/comp.cos2}
var.contrib <- t(apply(var.cos2,1, contrib, comp.cos2))
head(var.contrib[, 1:4])

# Coordinates of individuals
#::::::::::::::::::::::::::::::::::
ind.coord <- resu.pca$x
head(ind.coord[, 1:4])


# Cos2 of individuals
#:::::::::::::::::::::::::::::::::
# 1. square of the distance between an individual and the
# PCA center of gravity
center <- resu.pca$center
scale<- resu.pca$scale
getdistance <- function(ind_row, center, scale){
  return(sum(((ind_row-center)/scale)^2))
}
d2 <- apply(decathlon2.active,1,getdistance, center, scale)
# 2. Compute the cos2. The sum of each row is 1
cos2 <- function(ind.coord, d2){return(ind.coord^2/d2)}
ind.cos2 <- apply(ind.coord, 2, cos2, d2)
head(ind.cos2[, 1:4])

# Contributions of individuals
#:::::::::::::::::::::::::::::::
contrib <- function(ind.coord, comp.sdev, n.ind){
  100*(1/n.ind)*ind.coord^2/comp.sdev^2
}
ind.contrib <- t(apply(ind.coord, 1, contrib, 
                       resu.pca$sdev, nrow(ind.coord)))
head(ind.contrib[, 1:4])
